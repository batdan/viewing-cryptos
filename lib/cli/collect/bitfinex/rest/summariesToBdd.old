<?php
namespace cryptos\cli\collect\bitfinex;

/**
 * Récupération et stockage de l'intégralité des markets
 *
 * @author Daniel Gomes
 */
class summariesToBddRest
{
    /**
	 * Attributs
	 */
    private $_exchange      = 'bitfinex';               // Nom de l'exchange

    private $_dbh;                                      // Instance PDO de la BDD de l'Exchange
    private $_dbh2;                                     // Instance PDO de la BDD commune à la gestion des cryptos

    private $_nameBDD       = 'cryptos_pool';           // Nom de la base de données commune 'cryptos'
    private $_nameExBDD     = 'cryptos_ex_bitfinex';    // Nom de la base de données de l'exchange

    private $_prefixeTable  = 'market_';                // Préfixe des tables de market

    private $_colorCli;                                 // Gestion des couleurs en interface CLI

    private $_marketList;                               // Tableau contenant la liste des marketNames
    private $_marketSummaries;                          // Stockage des informations sur tous les markets

    private $_tablesList;                               // Liste des tables de market en BDD

    private $_rotateDelta   = 25;                       // Temps de conservation des données en 'unite'
    private $_rotateUnite   = 'HOUR';                   // Unité pour la durée de rotation

    private $_marketVolMin  = 10;                       // Volume minimum pour qu'un market soit traité

    private $_listNetworkInterfaces;                    // Liste des interfaces réseau disponibles sur le serveur pour requêter
    private $_currentNetworkInterface;                  // Stockage de l'interface réseau courante pour changer le tour suivant

    private $_timeInit;                                 // Permet de stocker le démarrage d'un tour pour en calculer le temps
    private $_timeEnd;                                  // Permet de stocker le démarrage d'un tour pour en calculer le temps

    private $_timeCurlInit;                             // Permet de stocker le démarrage d'un tour pour en calculer le temps
    private $_timeCurlEnd;                              // Permet de stocker le démarrage d'un tour pour en calculer le temps


    /**
	 * Constructeur
	 */
	public function __construct()
	{
        // Instance PDO de la BDD de l'Exchange
        $this->_dbh  = \core\dbSingleton::getInstance($this->_nameExBDD);

        // Instance PDO de la BDD commune à la gestion des cryptos
        $this->_dbh2 = \core\dbSingleton::getInstance($this->_nameBDD);

        // Gestion des couleurs en interface CLI
        $this->_colorCli = new \core\cliColorText();

        // Liste des IP disponibles sur le serveur pour requêter
        $this->_listNetworkInterfaces = \core\config::getConfig('ipServer');
    }


    /**
     * Boucle permettant de récupérer les données des markets chaque seconde
     */
    public function run()
    {
        for ($i=0; $i==$i; $i++) {

            $this->actions();

            // Attente souhaitée : 1 secondes
            $timeExec = ($this->_timeEnd - $this->_timeInit) * 1000000;
            $uSleep = 4000000 - $timeExec;

            if ($uSleep > 0) {
                usleep($uSleep);
            }
        }
    }


    /**
     * Ensemble des actions pour récupérer et stocker les informations de chaque market
     */
    public function actions()
    {
        // Début de la boucle
        $this->_timeInit = microtime(true);

        // Récupération de la liste des noms des markets
        $this->marketList();

        // Récupération de la liste des tables de market en BDD
        $this->tableList();

        // Création et suppression des tables de market si nécessaire
        $this->callScripts();

        // Fin de la boucle
        $this->_timeEnd = microtime(true);

        // Informaiton de suivi du bot
        $this->infosBot();
    }


    /**
     * Interface réseau à utiliser
     */
    private function selectInterface()
    {
        if (empty($this->_currentNetworkInterface) || $this->_currentNetworkInterface == end($this->_listNetworkInterfaces)) {

            $this->_currentNetworkInterface = $this->_listNetworkInterfaces[0];

        } else {

            $key = array_search($this->_currentNetworkInterface, $this->_listNetworkInterfaces);
            $this->_currentNetworkInterface = $this->_listNetworkInterfaces[ $key + 1 ];
        }

        return $this->_currentNetworkInterface;
    }


    /**
     * Récupération de la liste des tables de markets 'market_%' en BDD
     */
    private function tableList()
    {
        $prefixeTable = $this->_prefixeTable;
        $bddExchange  = $this->_nameExBDD;

        $this->_tablesList = array();

        $req = "SELECT  table_name AS exTable

                FROM    information_schema.tables

                WHERE   table_name LIKE ('$prefixeTable%')
                AND     table_schema = '$bddExchange'";

        $sql = $this->_dbh->query($req);

        while ($res = $sql->fetch()) {
            $this->_tablesList[] = $res->exTable;
        }
    }


    /**
     * Récupération de la liste des noms des markets
     */
    private function marketList()
    {
        $networkInterface = $this->selectInterface();
        $curlOptInterface = array(CURLOPT_INTERFACE => $networkInterface);

        $this->_marketList = \cryptos\api\bitfinex\getMarket::getSymbols($curlOptInterface);
    }


    /**
     * Appel des scripts qui se chargeront de récupérer tous les orderBooks
     */
    private function callScripts()
    {
        // Requête de suppression du suvi d'un process dans la table pid_pool
        $req_del = "DELETE FROM pid_pool WHERE id = :id";
        $sql_del = $this->_dbh2->prepare($req_del);

        // Requête pour vérifier s'il ne reste pas un processus de récupération de summary non terminé
        $exchange = $this->_exchange;

        $req = "SELECT market, pid, date_crea FROM pid_pool WHERE plateforme = '$exchange' AND service = 'summaries'";
        $sql = $this->_dbh2->query($req);

        // Tableau listant les process encore en cours de traitement
        $listSummaryProcessActiv = array();

        while ($res = $sql->fetch()) {

            $market     = $res->market;
            $pid        = $res->pid;
            $date_crea  = $res->date_crea;

            // On vérifie la durée de vie du PID - max 60s
            $d = new \DateTime($date_crea);
            $timestamp = $d->getTimestamp();

            // Process fantome, on le kill
            if ((time() - $timestamp) >= 10) {

                $this->_dbh2->query("DELETE FROM pid_pool WHERE pid = $pid");
                exec('kill -9 ' . $pid);

            // Process en cours d'exécution dans un délai encore acceptable, on le laisse finir
            } else {
                $listSummaryProcessActiv[] = $market;
            }
        }

        // Affichage des scripts non terminées dans la bouble précédente
        if (count($listSummaryProcessActiv) > 0) {
            echo $this->_colorCli->getColor(' Scripts non terminés : ', 'light_red') . chr(10) . chr(10);
            $i=0;
            foreach ($listSummaryProcessActiv as $marketName) {
                echo $this->_colorCli->getColor(' ' . str_pad($i, 2, '0', STR_PAD_LEFT) . ' : ' . $marketName, 'light_red') . chr(10);
                $i++;
            }
            echo chr(10);
        }

        // Boucle pour appeler tous les scripts de récupération des orderBooks
        $i=1;
        if ($this->_marketList !== false) {
            foreach ($this->_marketList as $marketName => $marketNameStd) {

                // Traitement de la récupération des orderBooks
                if (! in_array($marketNameStd, $listSummaryProcessActiv)) {
                    $networkInterface = $this->selectInterface();
                    $cde = 'php -f botSaveSummariesAux.php ' . $marketName . ' ' . $networkInterface;
                    echo $this->_colorCli->getColor(' ' . str_pad($i, 2, '0', STR_PAD_LEFT) . ' : ' . $cde, 'light_green') . chr(10);
                    exec($cde . ' &> /dev/null &');
                    $i++;
                }
            }
        }

        // Suppression des tables obsolètes
        $this->deleteTables();
    }


    /**
     * Sauvegarde d'un marketSummary avec le process auxiliaire
     */
    public function saveMaketSummary($marketName, $networkInterface)
    {
        // Récupération de la liste des tables de market en BDD
        $this->tableList();

        // Récupération de la liste des marketNames
        $this->marketList();

        // Récupération du PID du process courant
        $pid = getmypid();

        // Sauvegarde du pid en BDD
        $exchange = $this->_exchange;

        $marketNameStd = $this->marketNameStd($marketName);

        $req = "INSERT INTO pid_pool (plateforme, service, market, pid, date_crea) VALUES ('$exchange', 'summaries', '$marketNameStd', $pid, NOW())";
        $sql = $this->_dbh2->query($req);

        // Requête qui supprime le suivi du process dans la table PID si abandonné ou terminé
        $req_del = "DELETE FROM pid_pool WHERE pid = $pid";

        $curlOptInterface = array(CURLOPT_INTERFACE => $networkInterface);

        // Récupération du marketSummary
        $getMarketSummary = \cryptos\api\bitfinex\getMarket::getMarketSummary($marketName, $curlOptInterface);

        // Problème avec l'API, on kill le process et on nettoie pid_pool
        if ($getMarketSummary === false) {
            $this->_dbh2->query($req_del);
            exec('kill ' . $pid);
            return;
        }

        $last           = $getMarketSummary->last_price;
        $high           = $getMarketSummary->last_price;
        $low            = $getMarketSummary->last_price;
        $open           = $getMarketSummary->last_price;

        $volume         = $getMarketSummary->volume;
        $baseVolume     = $volume * $last;
        $bid            = $getMarketSummary->bid;
        $ask            = $getMarketSummary->ask;
        $timestampEx    = gmdate('Y-m-d H:i:s');
        $openBuyOrders  = null;
        $openSellOrders = null;
        $prevDay        = null;

        // Récupération du dateTime GMT et des millisecondes
        // $dateTimeMilli = $this->convertTimestamp($timestampEx);
        // $timestampEx   = $dateTimeMilli['dateTime'];
        // $millisecondes = $dateTimeMilli['millisecondes'];

        // Vérification pour savoir si le volume minimum est atteint
        //if ($this->checkVolume($marketName, $volume, $last) !== true) {
        //    $this->_dbh2->query($req_del);
        //    return;
        //}

        // Nom de la table pour stocker le marketSummary
        $tableName = $this->tableMarketName($marketName);

        // Vérification de l'existence de la table en BDD
        $this->checkExistTable($tableName);

        /*
        // Check pour savoir si la dernière sauvegarde est équivalente, si oui on passe le tour pour ce market
        $req = "SELECT id FROM $tableName WHERE timestampEx = :timestampEx AND millisecondes = :millisecondes";
        $sql = $this->_dbh->prepare($req);

        $sql->execute(array(
            ':timestampEx'   => $timestampEx,
            ':millisecondes' => $millisecondes,
        ));

        if ($sql->rowCount() > 0) {
            $this->_dbh2->query($req_del);
            exec('kill ' . $pid);
            return;
        }
        */

        // On vérifie s'il y a déjà une entrée pour cette minute
        $req = "SELECT id, high, low FROM $tableName WHERE date_crea LIKE :date_crea";
        $sql = $this->_dbh->prepare($req);
        $sql->execute(array( ':date_crea' => date('Y-m-d H:i') . '%' ));

        if ($sql->rowCount() == 0) {

            // Requête d'ajout
            $req = "INSERT INTO $tableName
                        ( marketName,  volume,  baseVolume,  high,  low,  open,  last,  bid,  ask,  openBuyOrders,  openSellOrders,  prevDay,  timestampEx,  millisecondes, date_crea, date_modif)
                    VALUES
                        (:marketName, :volume, :baseVolume, :high, :low, :open, :last, :bid, :ask, :openBuyOrders, :openSellOrders, :prevDay, :timestampEx, :millisecondes, NOW(), NOW())";

            $sql = $this->_dbh->prepare($req);

            $sql->execute(array(
                ':marketName'       => $marketNameStd,
                ':volume'           => $volume,
                ':baseVolume'       => $baseVolume,
                ':high'             => $high,
                ':low'              => $low,
                ':open'             => $open,
                ':last'             => $last,
                ':bid'              => $bid,
                ':ask'              => $ask,
                ':openBuyOrders'    => $openBuyOrders,
                ':openSellOrders'   => $openSellOrders,
                ':prevDay'          => $prevDay,
                ':timestampEx'      => $timestampEx,
                ':millisecondes'    => null,
            ));

        } else {

            $res = $sql->fetch();

            $id   = $res->id;
            $high = $res->high;
            $low  = $res->low;

            // Requête de mise à jour
            $req = "UPDATE          $tableName

                    SET             volume          = :volume,
                                    baseVolume      = :baseVolume,
                                    high            = :high,
                                    low             = :low,
                                    last            = :last,
                                    bid             = :bid,
                                    ask             = :ask,
                                    openBuyOrders   = :openBuyOrders,
                                    openSellOrders  = :openSellOrders,
                                    prevDay         = :prevDay,
                                    timestampEx     = :timestampEx,
                                    date_modif      = NOW()

                    WHERE           id              = :id";

            $sql = $this->_dbh->prepare($req);

            // Calcul du high
            if ($last > $high) {
                $high = $last;
            }

            // Calcul du low
            if ($last < $low) {
                $low = $last;
            }

            $sql->execute(array(
                ':volume'           => $volume,
                ':baseVolume'       => $baseVolume,
                ':high'             => $high,
                ':low'              => $low,
                ':last'             => $last,
                ':bid'              => $bid,
                ':ask'              => $ask,
                ':openBuyOrders'    => $openBuyOrders,
                ':openSellOrders'   => $openSellOrders,
                ':prevDay'          => $prevDay,
                ':timestampEx'      => $timestampEx,
                ':id'               => $id,
            ));
        }

        // Suppression des entrées dépassant le nombre d'heures de conservation des données
        $rotateDelta = $this->_rotateDelta;
        $rotateUnite = $this->_rotateUnite;

        // Rotate : suppression des entrées trop anciennes
        $req = "DELETE FROM $tableName WHERE date_crea < DATE_ADD(NOW(), INTERVAL -$rotateDelta $rotateUnite)";
        $sql = $this->_dbh->query($req);

        // Nettoyage de pid_pool
        $this->_dbh2->query($req_del);

        // Fermeture des instances PDO
        // \core\dbSingleton::closeInstance($this->_nameBDD);
        // \core\dbSingleton::closeInstance($this->_nameExBDD);

        // Le script est terminé
        exec('kill ' . $pid);

        return;
    }


    /**
     * Si la table du marketName n'existe pas, elle est créée
     *
     * @param       string      $tableName          Nom du marketName
     */
    private function checkExistTable($tableName)
    {
        if (count($this->_tablesList) == 0 || ! in_array($tableName, $this->_tablesList)) {
            $req = $this->tableStructure($tableName);
            $sql = $this->_dbh->query($req);
        }
    }


    /**
     * Template pour les créations de tables
     *
     * @param       string      $tableMarketName    Nom de la table à créer
     * @return      string
     */
    private function tableStructure($tableMarketName)
    {
        $req = <<<eof
            SET SQL_MODE  = "NO_AUTO_VALUE_ON_ZERO";

            CREATE TABLE `___TABLE_NAME___` (
            `id`                int(11)         NOT NULL,
            `marketName`        varchar(20)     NOT NULL,
            `volume`            decimal(20,8)   NULL,
            `baseVolume`        decimal(20,8)   NULL,
            `high`              decimal(16,8)   NULL,
            `low`               decimal(16,8)   NULL,
            `open`              decimal(16,8)   NULL,
            `last`              decimal(16,8)   NOT NULL,
            `bid`               decimal(16,8)   NOT NULL,
            `ask`               decimal(16,8)   NOT NULL,
            `openBuyOrders`     int(11)         NULL,
            `openSellOrders`    int(11)         NULL,
            `prevDay`           decimal(16,8)   NULL,
            `timestampEx`       datetime        NOT NULL,
            `millisecondes`     int(6)          NULL,
            `date_crea`         datetime        NOT NULL,
            `date_modif`        datetime        NULL
            ) ENGINE=MyISAM DEFAULT CHARSET=utf8;

            ALTER TABLE `___TABLE_NAME___`
            ADD PRIMARY KEY                 (`id`),
            ADD         KEY `id`            (`id`),
            ADD         KEY `last`          (`last`),
            ADD         KEY `baseVolume`    (`baseVolume`),
            ADD         KEY `timestampEx`   (`timestampEx`),
            ADD         KEY `date_crea`     (`date_crea`);

            ALTER TABLE `___TABLE_NAME___`
            MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
eof;

        return str_replace('___TABLE_NAME___', $tableMarketName, $req);
    }


    /**
     * Suppression des tables obsolètes
     */
    private function deleteTables()
    {
        // Mise en forme de la liste des tables pour la requête
        if ($this->_marketList !== false) {

            $tableList = array();

            foreach ($this->_marketList as $key => $val) {
                $tableList[] = "'" . $this->tableMarketName($key) . "'";
            }

            $tableList = implode(', ', $tableList);

            $prefixeMarketTable = $this->_prefixeTable;
            $bddExchange = $this->_nameExBDD;

            // Récupération de la liste des tables obsolètes
            $req = "SELECT  table_name AS exTable

                    FROM    information_schema.tables

                    WHERE   table_name NOT IN ($tableList)
                    AND     table_name LIKE ('$prefixeMarketTable%')
                    AND     table_schema = '$bddExchange'";

            $sql = $this->_dbh->query($req);

            // Suppression
            while ($res = $sql->fetch()) {
                $this->_dbh->query("DROP TABLE " . $res->exTable);
            }
        }
    }


    /**
     * Vérification du volume de chaque market pour savoir si le sueil mini est atteint
     *
     * @param       string      $marketName         Market a vérifier
     * @param       float       $baseVolume         Volume du market
     * @param       float       $last               Montant du dernier ordre enregistré
     *
     * @return      boolean
     */
    private function checkVolume($marketName, $baseVolume, $last)
    {
        // Récupération des deux monnais de marketName
        $expMarket = explode('-', $marketName);

        // On exprime le volume en Bitcoin
        switch ($expMarket[0])
        {
            case 'EUR'  : $volBTC = $baseVolume / $last;    break;
            case 'USD'  : $volBTC = $baseVolume / $last;    break;
            case 'ETH'  : $volBTC = $baseVolume * $last;    break;
            default     : $volBTC = $baseVolume;
        }

        // Vérification
        if ($volBTC >= $this->_marketVolMin) {
            return true;
        }
    }


    /**
     * Convertion des dates et heures en GMT 0
     * Séparation du dateTime et des millisecondes
     *
     * @param       string      $timestamp          Format dateTime + millisecondes
     * @return      array
     */
    private function convertTimestamp($timestamp)
    {
        $timestamp = floatval($timestamp);

        $millisecondes = $timestamp - floor($timestamp);
        $millisecondes = floor($millisecondes * 1000);

        $timestamp = floor($timestamp);

        // Récupération du décallage horaire pour ramener timestamp sur le timeZone UTC
        $d = new \DateTime();
        $decallageSec = $d->format('Z');

        $timestamp = $timestamp - $decallageSec;

        $dateTime = new \DateTime();
        $dateTime->setTimestamp($timestamp);

        return array(
            'dateTime'      => $dateTime->format('Y-m-d H:i:s'),
            'millisecondes' => $millisecondes,
        );
    }


    /**
     * Standardisation du marketName
     *
     * @param       string      $marketName         Nom du marketName
     */
    private function marketNameStd($marketName)
    {
        return substr($marketName, 3, 3) . '-' . substr($marketName, 0, 3);
    }


    /**
     * Récupère le nom de la table associée à un marketName
     *
     * @param       string      $marketName         Nom du marketName
     */
    private function tableMarketName($marketName)
    {
        return $this->_prefixeTable . substr($marketName, 3, (strlen($marketName)-3)) . '_' . substr($marketName, 0, 3);
    }


    /**
     * Infomation de suivi du bot
     */
    private function infosBot()
    {
        // Affichage de suivi
        if (PHP_SAPI === 'cli') {
            system('clear');
        }

        $hr = chr(10) . chr(10) . '________________________________' . chr(10) . chr(10) . chr(10);
        $hr = $this->_colorCli->getColor($hr, 'dark_gray');

        // Titre ---------------------------------------------------------------
        $texte  = chr(10);
        $texte .= $this->_colorCli->getColor(' Exchange : ' . ucfirst($this->_exchange), 'white') . chr(10);
        $texte .= $this->_colorCli->getColor(' Sauvegarde : marketSummaries', 'white') . chr(10) . chr(10);
        $texte .= $this->_colorCli->getColor(' ' . date('Y-m-d H:i:s'), 'yellow');

        // Durées d'exécution --------------------------------------------------
        $texte .= $hr;
        $texte .= $this->_colorCli->getColor(' Durée : ' . round(($this->_timeEnd - $this->_timeInit), 3) . 's', 'light_gray') . chr(10) . chr(10);

        echo $texte;
    }
}
